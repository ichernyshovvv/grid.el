#+html: <h2 align=center>grid.el</h2>

* Contents

- [[#description][Description]]
- [[#api][API]]

* Description
:PROPERTIES:
:CUSTOM_ID: description
:END:

This library allows you to put text data into boxes and align them horizontally,
applying margin, padding, borders.

A snippet from grid-examples.el. Evaluate it in a buffer at the first character
of some line:

#+begin_src elisp
(grid-insert-content
 `(((:content ,grid-multiline-str :width 10 :border t :padding 1)
    (:content ,grid-lipsum-2 :width "33%" :padding 2)
    (:content ,grid-lipsum :width "33%" :padding 3))
   ((:content ,grid-multiline-str :width "49%" :border t :padding 1)
    (:content ,grid-lipsum :width "49%" :border t :padding 10))))
#+end_src

Result:
#+html: <div align=center><img src='image.png'/></div>

You can wrap into a box any text you want. Any text properties will be
saved. For example, this is a combination of [[https:https://github.com/ichernyshovvv/light-dashboard][light-dashboard]] and some other
text:

#+begin_src elisp
(grid-insert-content
 `(((:content ,grid-calendar :width 24 :border t :padding 1)
    (:content ,light-dashboard-dashboard-string :width 40)
    (:content ,grid-lipsum :width 40 :border 1 :padding 1))))
#+end_src

Result:
#+html: <div align=center><img src='image-with-light-dashboard.png'></div>

* API
:PROPERTIES:
:CUSTOM_ID: api
:END:

- ~grid-insert-box~

#+begin_src elisp
(grid-insert-box BOX)
#+end_src

- ~grid-insert-rows~

#+begin_src elisp
(grid-insert-rows '(ROW ROW ...))
;; ROW: '(BOX BOX ...)
#+end_src

- ~grid-insert-row~

#+begin_src elisp
(grid-insert-row ROW)
;; ROW: '(BOX BOX ...)
#+end_src

- ~grid-insert-column~

#+begin_src elisp
(grid-insert-column COLUMN)
;; COLUMN: '(BOX BOX ...)
#+end_src

- ~grid-make-box~
- ~grid-make-column~
- ~grid-make-row~
- ~grid-make-rows~

BOX formats:

- string. In that case the width of the box will be equal to the longest line in
  the string.

- plist. Properties:

  :content - string to be inserted in the box

  Optional:
    
    :align
    center
    left (default)
    right
    
    :width
    "50%"
    integer (number of characters)

    :border
    nil or t

    :padding - horizontal padding
    integer (number of characters)

  
