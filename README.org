#+html: <h2 align=center>grid.el</h2>

* Contents

- [[#description][Description]]
- [[#api][API]]

* Description
:PROPERTIES:
:CUSTOM_ID: description
:END:

This library allows you to put text data into boxes and align them horizontally,
applying margin, padding, borders.

Evaluate it in a buffer at the first character of some line:

#+begin_src elisp
(progn
  (load "test/strings.el")
  (grid-insert-row `(( :content ,test-grid-1-line :width 20 :border t)
                     ( :content ,test-grid-1-line :padding (1 . ?#)
                       :width 15 :align center :margin (0 2))
                     ( :content ,test-grid-1-line :width 20 :align right
                       :border t))))
#+end_src

Result:
#+html: <div align=center><img width="500" src='image.png'/></div>

With =grid-text-selection-mode= (local minor mode) enabled, it's
possible to select the text only within desired box:

#+begin_src elisp
(progn
  (load "test/strings.el")
  (grid-text-selection-mode)
  (grid-insert-column
   `(,(grid-make-row `(( :content ,test-grid-1-line :width 20 :border t)
                       ( :content ,test-grid-1-line :padding (1 . ?#)
                         :width 15 :align center :margin (0 2))
                       ( :content ,test-grid-1-line :width 20 :align right
                         :border t)))
     ( :content ,test-grid-1-line :padding (1 . ?Â·) :width 59))))
#+end_src

#+html: <div align=center><img width="500" src='selection.gif'/></div>

See ~test/~ for examples.

* API
:PROPERTIES:
:CUSTOM_ID: api
:END:

- ~grid-insert-box~

#+begin_src elisp
(grid-insert-box BOX)
#+end_src

- ~grid-insert-rows~

#+begin_src elisp
(grid-insert-rows '(ROW ROW ...))
;; ROW: '(BOX BOX ...)
#+end_src

- ~grid-insert-row~

#+begin_src elisp
(grid-insert-row ROW)
;; ROW: '(BOX BOX ...)
#+end_src

- ~grid-insert-column~

#+begin_src elisp
(grid-insert-column COLUMN)
;; COLUMN: '(BOX BOX ...)
#+end_src

- ~grid-make-box~
- ~grid-make-column~
- ~grid-make-row~
- ~grid-make-rows~

BOX formats:

- string. In that case the width of the box will be equal to the longest line in
  the string.

- plist. Properties:

  =:content= - string to be inserted in the box

  Optional:
    
    =:align= - content alignment
    - ~center~
    - ~left~ (default)
    - ~right~
    
    =:width= - width of the box
    - ~float~ [0.5, .3] - width as a percentage of the current window
    - ~integer~ - number of characters

    =:border=
    - ~boolean~

    =:padding= - space between the content and the border
    Side formats (can be used as a value. in that case, all 4 sides will use it):
    - ~integer~ - number of whitespace characters
    - ~(integer . character)~ - number of specified characters

    List formats:
    - ~(top right bottom left)~ - each side can be an integer or a cons pair
    - ~(vertical horizontal)~ - shortened version, where top = bottom, left = right

    =:margin= - space outside of the box. Has the same format as =:padding=.
